<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>hunt3ri.github.io - DevOps</title><link href="https://hunt3ri.github.io/" rel="alternate"></link><link href="https://hunt3ri.github.io/feeds/devops.atom.xml" rel="self"></link><id>https://hunt3ri.github.io/</id><updated>2022-02-10T22:08:00+00:00</updated><entry><title>Introducing Terragen – Powerful config for sophisticated cloud architectures</title><link href="https://hunt3ri.github.io/introducing-terragen-powerful-config-for-sophisticated-cloud-architectures.html" rel="alternate"></link><published>2022-02-10T22:08:00+00:00</published><updated>2022-02-10T22:08:00+00:00</updated><author><name>Iain Hunter</name></author><id>tag:hunt3ri.github.io,2022-02-10:/introducing-terragen-powerful-config-for-sophisticated-cloud-architectures.html</id><summary type="html">&lt;p&gt;Terragen provides a simple way to configure sophisticated cloud architectures across multiple accounts&lt;/p&gt;</summary><content type="html">&lt;p&gt;I’ve been working with Terraform off and on for around 4 years now.  Generally I love it, it’s a powerful tool for managing your cloud based infrastructure and the HCL definition language makes your Infrastructure-as-Code files reasonably readable and maintainable.&lt;/p&gt;
&lt;p&gt;However, it does have its wrinkles, my personal top 5 annoyances:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Managing infrastructure across multiple accounts, eg DEV/TEST/PROD can be painful and can lead to duplication without careful thought&lt;/li&gt;
&lt;li&gt;The management of shared infra (eg VPCs, Databases) and app level infra in the same repo can be tricky.  Eg I definitely don’t want to accidentally tear down a shared database when I’m tearing down my little hello-world app.&lt;/li&gt;
&lt;li&gt;Configuration changes between environments, eg TEST environment runs t3.small instances but prod runs m5.xlarge can be cumbersome&lt;/li&gt;
&lt;li&gt;Establishing enterprise standards, like tags that should be attached to all instances, shared Security Groups and so on can be difficult&lt;/li&gt;
&lt;li&gt;There can be a lot of boilerplate config files and so on.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To ease the pain on the above I wrote &lt;a href="https://github.com/hunt3ri/terragen"&gt;Terragen&lt;/a&gt;, a pip installable python utility that provides a powerful but lightweight configuration engine ontop of your existing Terraform modules.  Let’s see it in action:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Faust" src="https://hunt3ri.github.io/images/Terragen.gif#centre"&gt;&lt;/p&gt;
&lt;p&gt;With Terragen you can:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Bring your own modules, Terragen wants to as much as possible stay out of your working modules.&lt;/li&gt;
&lt;li&gt;Establish default configs with embedded standards like tags, security groups that you can apply to all configs that “inherit” from them&lt;/li&gt;
&lt;li&gt;Control the construction/destruction of Shared infra (VPCs, Databases) from App specific infra separately if you want.&lt;/li&gt;
&lt;li&gt;Create mandatory values so your teams are alerted if they miss config that are embeeded in Company standards&lt;/li&gt;
&lt;li&gt;Powerful lookup syntax making it easy to set environment specific config, like instance types, disk space and so on.&lt;/li&gt;
&lt;li&gt;Fine grained CLI control, all config values can be overridden on the CLI meaning it works nicely with your CI tool of choice&lt;/li&gt;
&lt;li&gt;View generated Terraform files before they are applied.  Each run creates a timestamped output directory&lt;/li&gt;
&lt;li&gt;Boiler plate Terraform files like config, tfvars are automatically generated.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Terragen uses a provider based model, while it currently only supports AWS, providers for Azure, GCP could be created by the community if the project gets some traction.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/hunt3ri/terragen"&gt;Terragen is on github here&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;You can find &lt;a href="https://github.com/hunt3ri/terragen-example-configs"&gt;example config files are available to look at here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Just run &lt;code&gt;pip install terragen&lt;/code&gt; to get started :)&lt;/p&gt;</content><category term="DevOps"></category></entry></feed>